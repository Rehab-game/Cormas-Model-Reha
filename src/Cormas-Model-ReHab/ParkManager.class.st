Class {
	#name : #ParkManager,
	#superclass : #Object,
	#instVars : [
		'zones',
		'reserve',
		'logFile',
		'strategy'
	],
	#category : #'Cormas-Model-ReHab'
}

{ #category : #'- default value' }
ParkManager class >> mySpaceUnits_default [
	"Return the default value of mySpaceUnits attribute"
	^nil
]

{ #category : #'- default value' }
ParkManager class >> strategy_default [
	"Return the default value of attribute #strategy : nil.
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"

	^nil
]

{ #category : #'+ parameter unit' }
ParkManager class >> strategy_type [
	"Return the type of attribute #strategy.
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"

	^UndefinedObject
]

{ #category : #'- default value' }
ParkManager class >> zones_default [
	"Return the default value of attribute #zones : IndexedSet new.
	!! This method was automatically generated by Cormas !!"

	^IndexedSet new
]

{ #category : #'- default value' }
ParkManager class >> zones_type [
	"Return the type of attribute #zones.
	!! This method was automatically generated by Cormas !!"

	^Collection
]

{ #category : #control }
ParkManager >> decideAccess [
| zone |

	self strategy getLocations
		do:
			[:n |
			zone := self zones
				detect: [:c | c id = n]
				ifNone: [nil].
			zone isNil ifFalse: [zone access: false]]
]

{ #category : #control }
ParkManager >> getAccessDecisionsAutonomous [

	(Cormas
		selectRandomlyFrom: self zones
		subCollectionSize: (Cormas randomFrom: 0 to: 3))
		do: [:zone | zone access: false]
]

{ #category : #control }
ParkManager >> getAccessDecisionsFromFileRound: anInteger [
	| stream roundFound info line round zone |
	anInteger > 1 ifTrue: [stream := self logFile readStream.
	roundFound := false.
	info := ''.
	[roundFound not and: [stream atEnd not]] whileTrue:
			[line := (stream upTo: Character cr) tokensBasedOn: Character tab.
			round := line first asNumber.
			info := line last.
			roundFound := round = anInteger].
	stream close.
	(roundFound and: [info isEmpty not])
		ifTrue:
			[(info tokensBasedOn: $;) do:
					[:s |
					s isEmpty
						ifFalse:
							[zone := self zones detect: [:c | c id = s asNumber] ifNone: [nil].
							zone notNil ifTrue: [zone access: false]]]]]
]

{ #category : #control }
ParkManager >> getAccessDecisionsFromPlayersRound: anInteger [
	| npString ids zone collec |
	npString := Dialog request: 'Parc manager decisions\(Enter id numbers of zones to be protected, separated by space) ' withCRs initialAnswer: ''.
	ids := (npString tokensBasedOn: Character space)
				collect: [:s | s asNumber].
	"ids size > 3 ifTrue: [Dialog warn: '3 zones max!'. ^self getAccessDecisionsFromPlayersRound: anInteger]."
	collec := Set new.
	ids do:
			[:n |
			zone := self zones detect: [:c | c id = n] ifNone: [nil].
			zone isNil
				ifFalse:
					[zone access: false. collec add: zone]].
	self logBannedSpaceUnits: collec round: anInteger.
]

{ #category : #log }
ParkManager >> logBannedSpaceUnits: aSet round: anInteger [
	| stream |
	stream := self logFile appendStream.
	stream nextPutAll: anInteger printString , '	'.
	aSet do: [:aSU | stream nextPutAll: aSU id printString , ';'].
	stream nextPutAll: '\' withCRs.
	stream close
]

{ #category : #accessing }
ParkManager >> logFile [
	^logFile
		ifNil: [logFile := ReHab gameSession construct: 'bannedLocations.txt']
]

{ #category : #accessing }
ParkManager >> logFile: x [
	logFile := x
]

{ #category : #accessing }
ParkManager >> reserve [
	"Getter accessor without default value "
	^reserve ifNil: [reserve := Set new].
]

{ #category : #accessing }
ParkManager >> reserve: x [
	reserve := x
]

{ #category : #accessing }
ParkManager >> strategy [
	"Getter accessor without initial value "
	^strategy
]

{ #category : #accessing }
ParkManager >> strategy: aUndefinedObject [
	"Setter accessor of attribute strategy	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "
	strategy := aUndefinedObject
]

{ #category : #accessing }
ParkManager >> zones [
	"Getter accessor with initial value = IndexedSet new.
	!! This method was automatically generated by Cormas !! "
	^zones ifNil:[zones := IndexedSet new]
]

{ #category : #accessing }
ParkManager >> zones: anObject [
	zones := anObject
]
